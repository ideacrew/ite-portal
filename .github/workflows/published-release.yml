name: Release to uat env

on:
  release:
    types: [published]

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

env:
  DBH_ENV: 'uat'
  S3_BUCKET: 'portal-uat-dbh-ite-com'
  CLOUDFRONT_DIST_ID: 'E27MWNAHLRBCZQ'
  BASE_URL: 'https://portal-uat.dbh-ite.com'
  REPO_NAME: 'ite-portal'

jobs:
  prep:
    runs-on: ubuntu-latest
    outputs:
      shortSha: ${{ steps.prep.outputs.short_sha }}
    steps:
      - name: Git branch name
        id: git-branch-name
        uses: EthanSK/git-branch-name-action@v1
      - name: Prepare info
        id: prep
        run: |
          SHORT_SHA=$(echo $GITHUB_SHA | head -c7)
          echo ::set-output name=short_sha::$SHORT_SHA
  main:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v3
        with:
          node-version: '16'
      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: install dependencies and verify Cypress
        env:
          # make sure every Cypress install prints minimal information
          CI: 1
        # print Cypress and OS info
        run: npm ci
      - run: npx nx build ite-portal
      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: ite-portal
          path: dist/apps/ite-portal
  deploy-firebase:
    environment: gcp-uat
    needs: [main]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Download artifact
        id: download-artifact
        uses: actions/download-artifact@v3
        continue-on-error: true
        with:
          name: ite-portal
          path: dist/apps/ite-portal
      - uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_JSON }}'
          projectId: dbh-ite
          target: dbh-ite-staging
          channelId: live
      - name: print log
        uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: firebase-log
          path: /home/runner/.npm/_logs
  deploy-aws:
    environment: aws-dev
    needs: [main, prep]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Starting deployment notification
        uses: slackapi/slack-github-action@v1.19.0
        with:
          payload: |
            {
              "text": "DEPLOYMENT STARTED: ${{ env.DBH_ENV }}: ${{ env.REPO_NAME }}: ${{ needs.prep.outputs.shortSha }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_DEPLOYMENTS_WEBHOOK_URL }}
      - name: Download artifact
        id: download-artifact
        uses: actions/download-artifact@v3
        continue-on-error: true
        with:
          name: ite-portal
          path: dist/apps/ite-portal
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Deploy Static Files to S3 (and backing up old site)
        run: |
          cd dist/apps/ite-portal
          aws s3 sync s3://${{ env.S3_BUCKET }}/  s3://backups-dbh-ite-com/${{ env.REPO_NAME }}/${{ env.DBH_ENV }}/`date +%s`/
          aws s3 sync --acl public-read . s3://${{ env.S3_BUCKET }}/ --delete
      - name: Invalidate Current Files on CloudFront & Wait
        run: |
          invalidationId=`AWS_MAX_ATTEMPTS=999 aws cloudfront create-invalidation --distribution-id ${{ env.CLOUDFRONT_DIST_ID }} --output text --query 'Invalidation.Id' --paths '/*'`
          ## disable waiting to save minutes
          aws cloudfront wait invalidation-completed --distribution-id ${{ env.CLOUDFRONT_DIST_ID }} --id ${invalidationId}
      - name: Load up CDN Cache
        run: |
          for i in {1..25}
          do
            curl "${{ env.BASE_URL }}"
          done
      - name: Post to a Slack channel
        uses: slackapi/slack-github-action@v1.19.0
        with:
          payload: |
            {
              "text": "DEPLOYMENT COMPLETED: ${{ env.DBH_ENV }}: ${{ env.REPO_NAME }}: ${{ env.SHORT_SHA }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_DEPLOYMENTS_WEBHOOK_URL }}
  failed:
    runs-on: ubuntu-latest
    needs: [deploy-aws]
    if: always() && needs.deploy-aws.result == 'failure'
    steps:
      - name: Post to a Slack channel
        uses: slackapi/slack-github-action@v1.19.0
        with:
          payload: |
            {
              "text": "***** DEPLOYMENT FAILED: ${{ needs.generate-and-upload-static-files.outputs.DBH_ENV }}: ${{ needs.generate-and-upload-static-files.outputs.REPO_NAME }}: ${{ needs.generate-and-upload-static-files.outputs.SHORT_SHA }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_DEPLOYMENTS_WEBHOOK_URL }}
